using Pkg
    Pkg.add("CSV")
    Pkg.add("DataFrames")
    Pkg.add("JuMP")
    Pkg.add("GLPK")
    Pkg.add("PyPlot")

using CSV, DataFrames, JuMP, GLPK

# Read CSV files and specify column types to ensure Float64 conversion
df_GUD = CSV.read("GeneratingUnitsData.csv", DataFrame; delim=';', types=Dict(:Pi_max => Float64, :Ci => Float64))
df_LP = CSV.read("LoadProfile.csv", DataFrame; delim=';', types=Dict(Symbol("System_demand_(MW)") => Float64))
df_LN = CSV.read("LoadNodes.csv", DataFrame;  delim=';', types=Dict(:Percentage_SystemLoad => Float64))
df_WP = CSV.read("WindFarmData.csv", DataFrame;  delim=';', types=Dict(:Pi_max => Float64))
df_TL = CSV.read("TransmissionLineDataV2.csv", DataFrame;  delim=';', types=Dict(:From => Int, :To => Int, Symbol("Reactance_PU") => Float64, Symbol("Capacity_MVA") => Float64))
df_ZD = CSV.read("ZoneData.csv", DataFrame;  delim=',', types=Dict(:Node => Int, :Zone => Int))
df_ZT = CSV.read("ZoneTransfers.csv", DataFrame;  delim=',', types=Dict(:From_zone => Int, :To_zone => Int, :Capacity_MVA => Float64))

Pi_max = df_GUD[!, :"Pi_max"]  # Maximum power output
Ci = df_GUD[!, :"Ci"]          # Production cost
Di = df_LP[!, "System_demand_(MW)"]  # Load profile
LN = df_LN[!, :"Percentage_SystemLoad"]  # Load node percentages
Dp = df_LN[!, :"U_d"]  # Demand price bids
WF_Prod = df_WP[!, :"Pi_max"] # Wind farm production for the first hour

From_zone = df_ZT[!, :"From_zone"]
To_zone = df_ZT[!, :"To_zone"]
Capacity_MVA = df_ZT[!, :"Capacity_MVA"]
Zone = df_ZD[!, :"Zone"]
Nodes = df_ZD[!, :"Node"]
Nodes_index = 1:length(Nodes)

# Define the transmission capacities between zones (from zone, to zone, capacity)


# Node to Zone Mapping
zones = Dict(
    1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 
    6 => 3, 7 => 3, 8 => 3, 9 => 1, 10 => 3, 
    11 => 2, 12 => 3, 13 => 3, 14 => 2, 15 => 2, 
    16 => 2, 17 => 2, 18 => 2, 19 => 2, 20 => 3, 
    21 => 2, 22 => 3, 23 => 3, 24 => 2
)
# Extract unique zones from the node-to-zone mapping
unique_zones = unique(values(zones))
total_zones = length(unique_zones)

# Compute the load for each node in only the first hour
D_FirstHour = [Di[1] * LN[i] for i in 1:length(LN)]

function MCP_calculate(cap_1, cap_2, cap_3)   
    # create dictionary for ATCs between zones
    trans_cap = Dict(
    (1, 2) => cap_1,
    (1, 3) => cap_2,
    (2, 3) => cap_3
)
    m = Model(GLPK.Optimizer)

    h=1:length(WF_Prod)
    i=1:length(Pi_max)
    j=1:length(D_FirstHour)
    # create decision variables for wind prod, generation and demand
    JuMP.@variable(m, W[h])
    JuMP.@variable(m, P[i])
    JuMP.@variable(m, D[j])

    # Generation and demand constraints
    JuMP.@constraint(m, [k in h], 0 <= W[k] <= WF_Prod[k])
    JuMP.@constraint(m, [k in i], 0 <= P[k] <= Pi_max[k])
    JuMP.@constraint(m, [k in j], 0 <= D[k] <= D_FirstHour[k])
    
    # creat decision variable for flow, indexed by from and to zone
    JuMP.@variable(m, f[1:total_zones, 1:total_zones])
    # Add ATC constraints for max and min flow
    JuMP.@constraint(m, [i in 1:total_zones, k in 1:total_zones],  f[i,k] <= get(trans_cap, (i, k), 0))
    JuMP.@constraint(m, [i in 1:total_zones, k in 1:total_zones],  f[i,k] >= -get(trans_cap, (i, k), 0))
    
    # **Power Balance Constraint**
    power_balance = JuMP.@constraint(m, [a in unique_zones], 
        (sum(D[k] for k in j if df_LN[!, :"Node"][k] in [x for (x, v) in zones if v == a])           # Demand only in zone a
        - sum(f[b, a] for b in unique_zones if (b, a) in keys(trans_cap))                           # Import from other zones
        + sum(f[a, b] for b in unique_zones if (a, b) in keys(trans_cap))                           # Export to other zones
        - sum(P[k] for k in i if df_GUD[!, :"Node"][k] in [x for (x, v) in zones if v == a])        # Generation in zone a
        - sum(W[k] for k in h if df_WP[!, :"Node"][k] in [x for (x, v) in zones if v == a]))*(-1)    # Wind Generation in zone a
        == 0
    )  
    
    # Objective function is unchanged from task 1
    JuMP.@objective(m, Max, sum(D[k] * Dp[k] for k in j) - sum(P[k] * Ci[k] for k in i) - sum(W[k] * 0 for k in h))

    optimize!(m)

    if termination_status(m) == MOI.OPTIMAL
        MCP_list = [round(JuMP.dual(power_balance[a]), digits=2) for a in unique_zones]
        sorted_indices = sortperm(unique_zones)  # Get sorted indices
        sorted_zones = unique_zones[sorted_indices]  # Sort nodes
        sorted_MCP_list = MCP_list[sorted_indices]
        println("Optimised social welfare: ", JuMP.objective_value(m))
        total_wf_profit = 0
        total_gen_profit = 0
        for a in unique_zones
            production = sum(value(P[k]) for k in i if df_GUD[!, :"Node"][k] in [x for (x, v) in zones if v == a]; init=0)  # Generation at node n
            wind = sum(value(W[k]) for k in h if df_WP[!, :"Node"][k] in [x for (x, v) in zones if v == a]; init=0)   # Wind generation at node n
            consumption = sum(value(D[k]) for k in j if df_LN[!, :"Node"][k] in [x for (x, v) in zones if v == a]; init=0)  # Demand at node n
            imports = sum(value(f[b, a]) for b in unique_zones if (b, a) in keys(trans_cap); init=0)  # Imports
            exports = sum(value(f[a, b]) for b in unique_zones if (a, b) in keys(trans_cap); init=0)  # Exports
            flows = []
            net_balance = production + wind - consumption + imports - exports  # Net power balance
            
            println("Zone $a: Production = $production, Wind = $wind, Consumption = $consumption, Imports = $imports, Exports = $exports, Net Balance = $net_balance, flows = $flows")
                
            MCP = round(JuMP.dual(power_balance[a]), digits=2)
            wf_profits = sum(value((MCP) * JuMP.value(W[k])) for k in h if df_WP[!, :"Node"][k] in [x for (x, v) in zones if v == a]; init=0) # What is the cost of wind energy?
            gen_profits = sum(value((MCP - Ci[k]) * JuMP.value(P[k])) for k in i if df_GUD[!, :"Node"][k] in [x for (x, v) in zones if v == a]; init=0)
            total_wf_profit += wf_profits  # Accumulate into total wind farm profit
            total_gen_profit += gen_profits  # Accumulate into total generator profit
        
        end
        println("\nTotal wind farm profit = ", total_wf_profit)
        println("Total generator profit = ", total_gen_profit)
    else
        println("Optimize was not successful. Return code: ", termination_status(m))
        MCP_list = "Optimize was not successful."
    end
    return sorted_zones, sorted_MCP_list
end

###### Generate zonal prices for different ATCs ###########
capacities_1 = [575, 1100, 2400]
capacities_2 = capacities_1 * 0.1
capacities_3 = capacities_1 * 0.01
capacities_4 = capacities_1 * 0.5
zones_1, MCP_list_1 = MCP_calculate(capacities_1...)
zones_4, MCP_list_4 = MCP_calculate(capacities_4...)
zones_2, MCP_list_2 = MCP_calculate(capacities_2...)
zones_3, MCP_list_3 = MCP_calculate(capacities_3...)

######### Make Bar graph comparing zonal prices for differnet ATCs ############
using PyPlot
# Bar width and offsets
bar_width = 0.07
gap = 0.03
offsets = [-0.15, -0.05, +0.05, 0.15]

# Softer, less bright colors
color1 = "#6b8ba4"  # muted blue
color2 = "#a46b6b"  # muted red
color3 = "#6ba46b"  # muted green
color4 = "#a46ba4"  # muted purple

# Create figure
figure(figsize=(10, 5))

# Plot bars with offset to prevent overlap
bar(zones_1 .+ offsets[1], MCP_list_1, width=bar_width, color=color1, label="ATC = MTC")
bar(zones_1 .+ offsets[2], MCP_list_4, width=bar_width, color=color4, label="ATC = 0.5 x MTC")
bar(zones_1 .+ offsets[3], MCP_list_2, width=bar_width, color=color2, label="ATC = 0.1 x MTC")
bar(zones_1 .+ offsets[4], MCP_list_3, width=bar_width, color=color3, label="ATC = 0.01 x MTC")


# Labels and formatting
xlabel("Zone")
ylabel("Market Clearing Price (\$/MWh)")
title("Market Clearing Prices Across Zones")
xticks(zones_1, string.(zones_1))  # Label each bar group with the zone number
grid(true, which="both", linestyle="--", alpha=0.7)
legend()
tight_layout()
show()
display(gcf())
