# Example

using JuMP,GLPK

# Load data from csv file
LoadProfile = CSV.read("LoadProfile.csv", DataFrame)
GUD = CSV.read("GeneratingUnitsData.csv", DataFrame)

m = Model(GLPK.Optimizer)

# Define power production and unit commitment variables
@variable(m, GUD.Pi_min[i] <= p[i=1:num_units] <= GUD.Pi_max[i])  # Power output
@variable(m, u[i=1:num_units], Bin)  # Unit on/off status

# Initial conditions (optional, based on Pi_ini and Ui_ini)
@constraint(m, [i=1:num_units], p[i] >= GUD.Pi_min[i] * u[i])
@constraint(m, [i=1:num_units], p[i] <= GUD.Pi_max[i] * u[i])

# Ramp rate constraints
@constraint(m, ramp_up[i=1:num_units], p[i] - GUD.Pi_ini[i] <= GUD.Ri_+[i])
@constraint(m, ramp_down[i=1:num_units], GUD.Pi_ini[i] - p[i] <= GUD.Ri_-[i])

# Minimum up and down time constraints
@constraint(m, min_up_time[i=1:num_units], u[i] * GUD.UT[i] <= sum(u[j] for j in 1:num_units))
@constraint(m, min_down_time[i=1:num_units], (1 - u[i]) * GUD.DT[i] <= sum(1 - u[j] for j in 1:num_units))

@variable(m, p1_max >= 0)
@variable(m, x2 >= 0)
@variable(m, x3 >= 0)


@objective(m, Max, 1*x1 + 2*x2)

@constraint(m, 1*x1 + 3*x2 <= 200)
@constraint(m, 2*x1 + 2*x2 <= 300)
@constraint(m, x2 <= 60)

optimize!(m)

if termination_status(m) == MOI.OPTIMAL
    println("Objective value: ", JuMP.objective_value(m))
    println("x1 = ", JuMP.value(x1))
    println("x2 = ", JuMP.value(x2))
else
    println("Optimize was not succesful. Return code: ", termination_status(m))
end

