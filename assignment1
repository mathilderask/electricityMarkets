using Pkg
Pkg.add("CSV")
Pkg.add("DataFrames")
Pkg.add("JuMP")
Pkg.add("GLPK")

using CSV, DataFrames, JuMP, GLPK

# Read CSV files and specify column types to ensure Float64 conversion
df_GUD = CSV.read("GeneratingUnitsData.csv", DataFrame; delim=';', types=Dict(:Pi_max => Float64, :Ci => Float64))
df_LP = CSV.read("LoadProfile.csv", DataFrame; delim=';', types=Dict(Symbol("System_demand_(MW)") => Float64))
df_LN = CSV.read("LoadNodes.csv", DataFrame;  delim=';', types=Dict(:Percentage_SystemLoad => Float64))

# Extract data directly as Float64
Pi_max = df_GUD[!, :"Pi_max"]  # Maximum power output
Ci = df_GUD[!, :"Ci"]          # Production cost
Di = df_LP[!, "System_demand_(MW)"]  # Load profile
LN = df_LN[!, :"Percentage_SystemLoad"]  # Load node percentages
Dp = df_LN[!, :"U_d"]  # Demand price bids

# Compute the load for each node in only the first hour
D_FirstHour = [Di[1] * LN[i] for i in 1:length(LN)]

m = Model(GLPK.Optimizer)


i=1:length(Pi_max)
j=1:length(D_FirstHour)

@variable(m, P[i])
@variable(m, D[j])


# Constraints
@constraint(m, [k in i], 0 <= P[k] <= Pi_max[k])
@constraint(m, [k in j], 0 <= D[k] <= D_FirstHour[k])
# Power Balance constraint
power_balance = @constraint(m, sum(D[k] for k in j) - sum(P[k] for k in i) == 0)

@objective(m, Max, sum(D[k] * Dp[k] for k in j) - sum(P[k] * Ci[k] for k in i))


optimize!(m)

if termination_status(m) == MOI.OPTIMAL
    println("Optimised social welfare: ", JuMP.objective_value(m))

# Extract and print optimal values for x1
    for i in keys(P)
        println("P[$i] = ", JuMP.value(P[i]))
    end

# Extract and print optimal values for x2
    for j in keys(D)
        println("D[$j] = ", JuMP.value(D[j]))
    end
    # Compute and print Market Clearing Price (MCP)
    println("Market Clearing Price (MCP): ", JuMP.dual(power_balance))
else
    println("Optimize was not successful. Return code: ", termination_status(m))
end


